pipeline {
    agent any
    
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    }
    
    environment {
        jenkinsPod = ''
        cypressPod = ''
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    git branch: 'main',
                        credentialsId: '9e708a8d-c1d1-4a8a-9632-3b31ad932908',
                        url: 'https://github.com/silomaben/cypress-pipetest.git'
                }
            }
        }


        stage('Start Pods for Testing') {
            steps {
                script {
                     withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'SECRET_TOKEN', namespace: 'default', serverUrl: 'https://192.168.49.2:8443']]) {                      
                        // sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                        // sh 'chmod u+x ./kubectl'

                        sh 'rm -f /var/jenkins_home/html/index.html' 

                        sh './kubectl apply -f express-api/kubernetes'
                        sh './kubectl apply -f ui-app/kubernetes'
                        sh './kubectl apply -f cypress-tests/kubernetes/job.yaml'

                    }
                }
            }
        }

        stage('Get Pod Names') {
            steps {
                script {
                     withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'SECRET_TOKEN', namespace: 'default', serverUrl: 'https://192.168.49.2:8443']]) {                      
                        podName = sh(script: './kubectl get pods -n jenkins -l app=jenkins -o jsonpath="{.items[0].metadata.name}"', returnStdout: true).trim()
                        echo "Found pod name: $podName"
                    }
                }
            }
        }


        stage('Install Kubectl, deploy apps and wait for test results') {
            steps {
                script {
                    withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'SECRET_TOKEN', namespace: 'default', serverUrl: 'https://192.168.49.2:8443']]) {
                        
                        waitForReport()

                        sh "./kubectl exec -n jenkins $podName -- cat /var/jenkins_home/html/index.html > report.html"
                        archiveArtifacts artifacts: 'report.html', onlyIfSuccessful: true

                        // Run kubectl logs command and store the output
                        def logs = sh(script: './kubectl logs -n jenkins e2e-test-app-job-8p7tm -c e2e-test-app', returnStdout: true).trim()

                        // Check if the text "all specs passed" is present in the logs
                        if (logs.contains("all specs passed")) {
                            echo "Specs passed: true"
                            // Add actions to perform when specs are passed
                        } else {
                            echo "Specs passed: false"
                            // Add actions to perform when specs are not passed
                        }

                        //kill the created pods and service.

                        // sh "./kubectl delete -n jenkins deployment express-app"
                        // sh "./kubectl delete -n jenkins deployment ui-app"
                        // sh "./kubectl delete -n jenkins job e2e-test-app-job"
                        // sh "./kubectl delete -n jenkins service ui-app"
                        // sh "./kubectl delete -n jenkins service express-app-service"
                    }
                }
            }
        }
    }
}

def waitForReport() {
    timeout(time: 5, unit: 'MINUTES') {
        script {
            def counter = 0 
            while (!fileExists('/var/jenkins_home/html/index.html')) {
                counter++ 
                echo "Waiting for index.html file to exist... (Attempt ${counter})"
                sleep 10 
            }
        }
    }
}


def fileExists(filePath) {
    return sh(script: "[ -f '$filePath' ]", returnStatus: true) == 0
}